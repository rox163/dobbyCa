var clone, debug, fs, jade, mkdirp, path, url;

jade = require('jade');

fs = require('fs');

path = require('path');

url = require('url');

mkdirp = require('mkdirp');

debug = require('debug')('connect-jade');

clone = function(src) {
  var obj, prop, val;
  if (typeof src !== 'object') return;
  if (Array.isArray(src)) return src.slice();
  obj = {};
  for (prop in src) {
    val = src[prop];
    obj[prop] = val;
  }
  return obj;
};

/*

A simple connect middleware to serve CoffeeScript files.

@param {Object} options
@return {Function}
@api public
*/

module.exports = function(options) {
  var baseDir, dest, src;
  if (options == null) options = {};
  if (typeof options === 'string') {
    options = {
      src: options
    };
  }
  baseDir = options.baseDir || process.cwd();
  src = options.src;
  if (!src) throw new Error('Coffeescript middleware requires "src" directory');
  src = path.resolve(baseDir, src);
  dest = options.dest ? options.dest : src;
  dest = path.resolve(baseDir, dest);
  if (options.compile == null) {
    options.compile = function(str, options) {
      var tmpl;
      tmpl = jade.compile(str, clone(options));
      return tmpl().replace(/^\s+|\s+$/g, '');
    };
  }
  return function(req, res, next) {
    var compile, error, htmlPath, jadePath, pathname;
    if ('GET' !== req.method && 'HEAD' !== req.method) return next();
    pathname = url.parse(req.url).pathname;
    if (/\.html$/.test(pathname)) {
      if (options.prefix && 0 === pathname.indexOf(options.prefix)) {
        pathname = pathname.substring(options.prefix.length);
      }
      htmlPath = path.join(dest, pathname);
      jadePath = path.join(src, pathname.replace('.html', '.jade'));
      error = function(err) {
        var arg;
        arg = 'ENOENT' === err.code ? null : err;
        return next(arg);
      };
      compile = function() {
        debug('read %s', htmlPath);
        return fs.readFile(jadePath, 'utf8', function(err, str) {
          var html;
          if (err) return error(err);
          options.filename = jadePath;
          try {
            html = options.compile(str, options);
          } catch (err) {
            return next(err);
          }
          debug('render %s', jadePath);
          return mkdirp(path.dirname(htmlPath), 0x1c0, function(err) {
            if (err) return error(err);
            return fs.writeFile(htmlPath, html, 'utf8', next);
          });
        });
      };
      if (options.force) return compile();
      return fs.stat(jadePath, function(err, jadeStats) {
        if (err) return error(err);
        return fs.stat(htmlPath, function(err, htmlStats) {
          if (err) {
            if ('ENOENT' === err.code) {
              debug('not found %s', htmlPath);
              return compile();
            } else {
              return next(err);
            }
          } else {
            if (jadeStats.mtime > htmlStats.mtime) {
              debug('modified %s', htmlPath);
              return compile();
            } else {
              return next();
            }
          }
        });
      });
    } else {
      return next();
    }
  };
};
