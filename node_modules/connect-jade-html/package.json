{
  "name": "connect-jade-html",
  "version": "0.0.1",
  "description": "Simple connect middleware to serve Jade files as HTML",
  "homepage": "",
  "author": {
    "name": "Roman Gafurov",
    "email": "gafurov.roma89@ya.ru"
  },
  "contributors": [
    {
      "name": "Roman Gafurov",
      "email": "gafurov.roma89@ya.ru"
    }
  ],
  "engines": {
    "node": ">= 0.6.0"
  },
  "dependencies": {
    "jade": "*",
    "debug": "~0.7",
    "mkdirp": "~0.3"
  },
  "keywords": [
    "connect",
    "express",
    "jade"
  ],
  "repository": {
    "type": "git",
    "url": "https://bitbucket.org/seth2810/connect-jade"
  },
  "_id": "connect-jade-html@0.0.1",
  "_from": "connect-jade-html",
  "readme": "[![Build Status](https://secure.travis-ci.org/wdavidw/node-connect-coffee-script.png)](http://travis-ci.org/wdavidw/node-connect-coffee-script)\n\n# connect-jade-html\n\nIt provide a simple [Connect] middleware to serve Jade without locals variables as template HTML files.\n\nThis project was created after the drop of native support for Jade in latest [Express]. More specifically, [Express] droped the compiler middleware in its versions 2 and 3 (the current versions at the time of this writing).\n\nRead the [annoucement article][annoucement] for more information.\n\n# Installation\n\nUsing npm:\n\n```bash\nnpm install connect-jade-html\n```\n\nUsage\n-----\n\nFunction returning a [Connect] middleware with the given `options`.\n\n### Options\n\n - `self`      Use a `self` namespace to hold the locals _(false by default)_\n - `locals`    Local variable defaults object\n - `filename`  Used in exceptions, and required when using includes\n - `debug`     Outputs tokens and function body generated\n - `compiler`  Compiler to replace jade's default\n - `compileDebug`  When `false` no debug instrumentation is compiled\n - `pretty`    Add pretty-indentation whitespace to output _(false by default)_\n\nBasic example\n-------------\n\nHere we will setup the middleware with only the required `src` option.\n\n```javascript\nvar jade = require('connect-jade-html');\nvar connect = require('connect');\n\nvar app = connect();\n\napp.use(jade({\n  src: __dirname,\n  pretty: true\n}));\n\napp.use(connect.static(__dirname + '/public'));\n\napp.listen(3000)\n```\n\nAdvanced example\n----------------\n\nPass the middleware to [Connect], grabbing \"*.jade\" files from this directory\nand saving .html files to _./public_. Also supplying our custom `compile` function.\n\nFollowing that we have a `static()` layer setup to serve the .html\nfiles generated by Jade.\n\n```javascript\nvar connectJadeHtml = require('connect-jade-html');\nvar connect = require('connect');\n\nvar app = connect();\n\napp.use(connectJadeHtml({\n  src: __dirname,\n  dest: __dirname + '/public',\n  debug: true\n}));\n\napp.use(connect.static(__dirname + '/public'));\n```\n\n[connect]:      http://senchalabs.github.com/connect/\n[express]:      http://expressjs.com/\n\nContributors\n------------\n\n*   Roman Gafurov : <https://bitbucket.org/seth2810>\n\n\n\n\n",
  "readmeFilename": "README.md",
  "dist": {
    "shasum": "8153f1351b442ec2436d5a186f2698d478b45402"
  }
}
